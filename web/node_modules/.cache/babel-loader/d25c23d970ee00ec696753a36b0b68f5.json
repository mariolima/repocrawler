{"ast":null,"code":"import _classCallCheck from\"/home/msclima/go/src/github.com/mariolima/repocrawler/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/msclima/go/src/github.com/mariolima/repocrawler/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/msclima/go/src/github.com/mariolima/repocrawler/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/msclima/go/src/github.com/mariolima/repocrawler/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/msclima/go/src/github.com/mariolima/repocrawler/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{Dimmer,Loader,Image,Segment}from'semantic-ui-react';import'./index.css';import Debug from'./debug/Debug.js';import Matches from'./matches/Matches.js';import Pulse from'./crawl_info/pulse.js';// const URL = 'wss://repocrawler:8090/ws';\nvar URL='ws://repocrawler:8090/ws';var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));_this.ws=new WebSocket(URL);_this.status=\"disconnected\";_this.setSelectedMatch=function(match){_this.setState({selected_match:match});};_this.tickRegexFilter=function(regex){_this.setState(function(state){return state.regexes[regex].Ticked=!state.regexes[regex].Ticked;});};_this.addMessage=function(message){return _this.setState(function(state){return state.logs.push(message);});};_this.setCrawlingState=function(cr){return _this.setState(function(state){return state.crawlstate=cr;});};_this.addMatch=function(match){_this.setState(function(state){return!state.regexes[match.Rule.Regex]?state.regexes[match.Rule.Regex]={Count:1,Ticked:true}:state.regexes[match.Rule.Regex].Count++;});_this.setState(function(state){return state.matches.push(match);});};_this.submitMessage=function(messageString){var message={name:_this.state.name,message:messageString};_this.ws.send(JSON.stringify(message));};_this.state={name:'Bob',logs:[{'msg':'Connecting...'}],matches:[],regexes:{},crawlstate:[],selected_match:\"\"};return _this;}_createClass(App,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.ws.onopen=function(){// on connecting, do nothing but log it to the consolea\nconsole.log('connected');_this2.submitMessage(\"wat\");_this2.status=\"connected\";};this.ws.onmessage=function(evt){// on receiving a message, add it to the list of messages\nvar message=JSON.parse(evt.data);console.log(message);if(message.event==\"debug\"){_this2.addMessage(message.data);//this.logs.push(message.data)\n//this.addMessage(message.data)\n}else if(message.event==\"match\"){_this2.addMatch(message.data.match);}else if(message.event==\"state\"){_this2.setCrawlingState(message.data);}};this.ws.onclose=function(){console.log('disconnected');//this.addMessage(\"disconnected\")\n// automatically try to reconnect on connection loss\n_this2.setState({ws:new WebSocket(URL)});};}},{key:\"render\",value:function render(){return React.createElement(\"div\",{className:\"App\"},React.createElement(Debug,{logs:this.state.logs}),React.createElement(Pulse,{regexes:this.state.regexes,tickRegex:this.tickRegexFilter,matches:this.state.matches,crawlstate:this.state.crawlstate}),React.createElement(Matches,{filters:this.state.regexes,selectedMatch:this.setSelectedMatch,matches:this.state.matches}));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/home/msclima/go/src/github.com/mariolima/repocrawler/web/src/App.js"],"names":["React","Component","Dimmer","Loader","Image","Segment","Debug","Matches","Pulse","URL","App","props","ws","WebSocket","status","setSelectedMatch","match","setState","selected_match","tickRegexFilter","regex","state","regexes","Ticked","addMessage","message","logs","push","setCrawlingState","cr","crawlstate","addMatch","Rule","Regex","Count","matches","submitMessage","messageString","name","send","JSON","stringify","onopen","console","log","onmessage","evt","parse","data","event","onclose"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\nimport './index.css'\nimport Debug from './debug/Debug.js'\nimport Matches from './matches/Matches.js'\nimport Pulse from './crawl_info/pulse.js'\n\n// const URL = 'wss://repocrawler:8090/ws';\nconst URL = 'ws://repocrawler:8090/ws';\nclass App extends Component {\n  ws = new WebSocket(URL)\n  status=\"disconnected\"\n\n  constructor(props) {\n        super(props);\n        this.state = {\n          name: 'Bob',\n          logs: [{'msg':'Connecting...'}],\n          matches: [],\n          regexes: {},\n          crawlstate: [],\n          selected_match: \"\",\n        }\n  }\n\n  componentDidMount() {\n      this.ws.onopen = () => {\n        // on connecting, do nothing but log it to the consolea\n        console.log('connected')\n        this.submitMessage(\"wat\")\n        this.status=\"connected\"\n      }\n\n      this.ws.onmessage = evt => {\n        // on receiving a message, add it to the list of messages\n        const message = JSON.parse(evt.data)\n        console.log(message)\n        if(message.event==\"debug\"){\n          this.addMessage(message.data)\n          //this.logs.push(message.data)\n          //this.addMessage(message.data)\n        }else if(message.event==\"match\"){\n          this.addMatch(message.data.match)\n        }else if(message.event==\"state\"){\n          this.setCrawlingState(message.data)\n        }\n      }\n\n      this.ws.onclose = () => {\n        console.log('disconnected')\n        //this.addMessage(\"disconnected\")\n        // automatically try to reconnect on connection loss\n        this.setState({\n          ws: new WebSocket(URL),\n        })\n      }\n  }\n  \n  setSelectedMatch = (match) => {\n        this.setState({selected_match: match});\n  }\n\n  tickRegexFilter = (regex) => {\n        this.setState(state => state.regexes[regex].Ticked=!state.regexes[regex].Ticked );\n  }\n\n  addMessage = message =>\n    this.setState(state => state.logs.push(message))\n\n  setCrawlingState = cr =>\n    this.setState(state => state.crawlstate=cr)\n\n  addMatch = match => {\n    this.setState(state => !state.regexes[match.Rule.Regex] ? state.regexes[match.Rule.Regex]={Count:1,Ticked:true} : state.regexes[match.Rule.Regex].Count++)\n    this.setState(state => state.matches.push(match));\n  }\n\n\n  submitMessage = messageString => {\n    const message = { name: this.state.name, message: messageString }\n    this.ws.send(JSON.stringify(message))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Debug logs={this.state.logs}/>\n        <Pulse\n          regexes={this.state.regexes}\n          tickRegex={this.tickRegexFilter}\n          matches={this.state.matches}\n          crawlstate={this.state.crawlstate}\n          />\n        <Matches filters={this.state.regexes} selectedMatch={this.setSelectedMatch} matches={this.state.matches}/>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}