{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nexports.__esModule = true;\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nfunction warn(warning) {\n  if (process.env.NODE_ENV !== \"production\") {\n    console.warn(warning); // eslint-disable-line no-console\n  }\n}\n\nfunction some(array, predicate) {\n  return array.filter(predicate).length > 0;\n}\n/** A powerful React component to abstract over flexbox and create any layout on any browser */\n\n\nvar FlexView =\n/** @class */\nfunction (_super) {\n  __extends(FlexView, _super);\n\n  function FlexView() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FlexView.prototype.componentDidMount = function () {\n    this.logWarnings();\n  };\n\n  FlexView.prototype.logWarnings = function () {\n    var _a = this.props,\n        basis = _a.basis,\n        shrink = _a.shrink,\n        grow = _a.grow,\n        hAlignContent = _a.hAlignContent,\n        vAlignContent = _a.vAlignContent,\n        children = _a.children,\n        column = _a.column;\n\n    if (basis === \"auto\") {\n      warn('basis is \"auto\" by default: forcing it to \"auto\"  will leave \"shrink:true\" as default');\n    }\n\n    if ((shrink === false || shrink === 0) && (grow === true || typeof grow === \"number\" && grow > 0)) {\n      warn('passing both \"grow\" and \"shrink={false}\" is a no-op!');\n    }\n\n    if (process.env.NODE_ENV !== \"production\" && typeof children !== \"undefined\" && !column && hAlignContent === \"center\") {\n      var atLeastOneChildHasHMarginAuto = some([].concat(children), function (child) {\n        var props = (typeof child === \"object\" && child !== null ? child.props : undefined) || {};\n        var style = props.style || {};\n        var marginLeft = style.marginLeft || props.marginLeft;\n        var marginRight = style.marginRight || props.marginRight;\n        return marginLeft === \"auto\" && marginRight === \"auto\";\n      });\n      atLeastOneChildHasHMarginAuto && warn('In a row with hAlignContent=\"center\" there should be no child with marginLeft and marginRight set to \"auto\"\\nhttps://github.com/buildo/react-flexview/issues/30');\n    }\n\n    if (process.env.NODE_ENV !== \"production\" && typeof children !== \"undefined\" && column && vAlignContent === \"center\") {\n      var atLeastOneChildHasVMarginAuto = some([].concat(children), function (child) {\n        var props = (typeof child === \"object\" && child !== null ? child.props : undefined) || {};\n        var style = props.style || {};\n        var marginTop = style.marginTop || props.marginTop;\n        var marginBottom = style.marginBottom || props.marginBottom;\n        return marginTop === \"auto\" && marginBottom === \"auto\";\n      });\n      atLeastOneChildHasVMarginAuto && warn('In a column with vAlignContent=\"center\" there should be no child with marginTop and marginBottom set to \"auto\"\\nhttps://github.com/buildo/react-flexview/issues/30');\n    }\n  };\n\n  FlexView.prototype.getGrow = function () {\n    var grow = this.props.grow;\n\n    if (typeof grow === \"number\") {\n      return grow;\n    } else if (grow) {\n      return 1;\n    }\n\n    return 0; // default\n  };\n\n  FlexView.prototype.getShrink = function () {\n    var _a = this.props,\n        shrink = _a.shrink,\n        basis = _a.basis;\n\n    if (typeof shrink === \"number\") {\n      return shrink;\n    } else if (shrink) {\n      return 1;\n    } else if (shrink === false) {\n      return 0;\n    }\n\n    if (basis && basis !== \"auto\") {\n      return 0;\n    }\n\n    return 1; // default\n  };\n\n  FlexView.prototype.getBasis = function () {\n    var basis = this.props.basis;\n\n    if (basis) {\n      var suffix = typeof basis === \"number\" || String(parseInt(basis, 10)) === basis ? \"px\" : \"\";\n      return basis + suffix;\n    }\n\n    return \"auto\"; // default\n  };\n\n  FlexView.prototype.getStyle = function () {\n    var _a = this.props,\n        column = _a.column,\n        wrap = _a.wrap,\n        vAlignContent = _a.vAlignContent,\n        hAlignContent = _a.hAlignContent;\n    var style = {\n      width: this.props.width,\n      height: this.props.height,\n      marginLeft: this.props.marginLeft,\n      marginTop: this.props.marginTop,\n      marginRight: this.props.marginRight,\n      marginBottom: this.props.marginBottom\n    };\n\n    function alignPropToFlex(align) {\n      switch (align) {\n        case \"top\":\n        case \"left\":\n          return \"flex-start\";\n\n        case \"center\":\n          return \"center\";\n\n        case \"bottom\":\n        case \"right\":\n          return \"flex-end\";\n      }\n    }\n\n    return __assign({\n      boxSizing: \"border-box\",\n      // some browsers don't set these by default on flex\n      minWidth: 0,\n      minHeight: 0,\n      // flex properties\n      display: \"flex\",\n      flexDirection: column ? \"column\" : \"row\",\n      flexWrap: wrap ? \"wrap\" : \"nowrap\",\n      flex: this.getGrow() + \" \" + this.getShrink() + \" \" + this.getBasis(),\n      justifyContent: alignPropToFlex(column ? vAlignContent : hAlignContent),\n      alignItems: alignPropToFlex(column ? hAlignContent : vAlignContent)\n    }, style, this.props.style);\n  };\n\n  FlexView.prototype.getDivProps = function () {\n    var _a = this.props,\n        children = _a.children,\n        className = _a.className,\n        style = _a.style,\n        column = _a.column,\n        grow = _a.grow,\n        shrink = _a.shrink,\n        basis = _a.basis,\n        wrap = _a.wrap,\n        vAlignContent = _a.vAlignContent,\n        hAlignContent = _a.hAlignContent,\n        width = _a.width,\n        height = _a.height,\n        marginBottom = _a.marginBottom,\n        marginTop = _a.marginTop,\n        marginLeft = _a.marginLeft,\n        marginRight = _a.marginRight,\n        rest = __rest(_a, [\"children\", \"className\", \"style\", \"column\", \"grow\", \"shrink\", \"basis\", \"wrap\", \"vAlignContent\", \"hAlignContent\", \"width\", \"height\", \"marginBottom\", \"marginTop\", \"marginLeft\", \"marginRight\"]);\n\n    return rest;\n  };\n\n  FlexView.prototype.render = function () {\n    return React.createElement(\"div\", __assign({\n      className: this.props.className,\n      style: this.getStyle()\n    }, this.getDivProps()), this.props.children);\n  };\n\n  FlexView.propTypes = {\n    children: PropTypes.node,\n    column: PropTypes.bool,\n    vAlignContent: PropTypes.oneOf([\"top\", \"center\", \"bottom\"]),\n    hAlignContent: PropTypes.oneOf([\"left\", \"center\", \"right\"]),\n    marginLeft: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    marginTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    marginRight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    marginBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    grow: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    shrink: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    basis: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    wrap: PropTypes.bool,\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    className: PropTypes.string,\n    style: PropTypes.object\n  };\n  return FlexView;\n}(React.Component);\n\nexports.FlexView = FlexView;\nexports[\"default\"] = FlexView;","map":null,"metadata":{},"sourceType":"script"}