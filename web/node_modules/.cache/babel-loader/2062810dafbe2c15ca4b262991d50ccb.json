{"ast":null,"code":"var _jsxFileName = \"/home/msclima/dwns/repocrawler/src/crawl_info/line_chart.js\";\nvar lastDate = 0;\nvar data = [];\nvar TICKINTERVAL = 86400000;\nlet XAXISRANGE = 777600000;\n\nfunction getDayWiseTimeSeries(baseval, count, yrange) {\n  var i = 0;\n\n  while (i < count) {\n    var x = baseval;\n    var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n    data.push({\n      x,\n      y\n    });\n    lastDate = baseval;\n    baseval += TICKINTERVAL;\n    i++;\n  }\n}\n\ngetDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\n  min: 10,\n  max: 90\n});\n\nfunction getNewSeries(baseval, yrange) {\n  var newDate = baseval + TICKINTERVAL;\n  lastDate = newDate;\n\n  for (var i = 0; i < data.length - 10; i++) {\n    // IMPORTANT\n    // we reset the x and y of the data which is out of drawing area\n    // to prevent memory leaks\n    data[i].x = newDate - XAXISRANGE - TICKINTERVAL;\n    data[i].y = 0;\n  }\n\n  data.push({\n    x: newDate,\n    y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n  });\n}\n\nfunction resetData() {\n  // Alternatively, you can also reset the data at certain intervals to prevent creating a huge series \n  data = data.slice(data.length - 10, data.length);\n}\n\nimport React, { Component } from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        grid: {\n          show: false\n        },\n        chart: {\n          id: 'realtime',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          },\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth',\n          width: 4\n        },\n        markers: {\n          size: 0\n        },\n        colors: ['#9e0034', '#9e0034', '#9e0034'],\n        xaxis: {\n          labels: {\n            show: false\n          },\n          axisBorder: {\n            show: false\n          },\n          type: 'datetime',\n          range: XAXISRANGE\n        },\n        yaxis: {\n          labels: {\n            show: false\n          },\n          max: 100\n        },\n        legend: {\n          show: false\n        }\n      },\n      series: [{\n        data: data.slice()\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.intervals();\n  }\n\n  intervals() {\n    window.setInterval(() => {\n      getNewSeries(lastDate, {\n        min: 0,\n        max: 100\n      });\n      ApexCharts.exec('realtime', 'updateSeries', [{\n        data: data\n      }]);\n    }, 1000);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"chart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(ReactApexChart, {\n      options: this.state.options,\n      series: this.state.series,\n      type: \"line\",\n      height: \"150\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LineChart;","map":{"version":3,"sources":["/home/msclima/dwns/repocrawler/src/crawl_info/line_chart.js"],"names":["lastDate","data","TICKINTERVAL","XAXISRANGE","getDayWiseTimeSeries","baseval","count","yrange","i","x","y","Math","floor","random","max","min","push","Date","getTime","getNewSeries","newDate","length","resetData","slice","React","Component","ReactApexChart","LineChart","constructor","props","state","options","grid","show","chart","id","animations","enabled","easing","dynamicAnimation","speed","toolbar","zoom","dataLabels","stroke","curve","width","markers","size","colors","xaxis","labels","axisBorder","type","range","yaxis","legend","series","componentDidMount","intervals","window","setInterval","ApexCharts","exec","render"],"mappings":"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","sourcesContent":[" var lastDate = 0;\n  var data = []\n  var TICKINTERVAL = 86400000\n  let XAXISRANGE = 777600000\n  function getDayWiseTimeSeries(baseval, count, yrange) {\n      var i = 0;\n      while (i < count) {\n          var x = baseval;\n          var y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n\n          data.push({\n              x, y\n          });\n          lastDate = baseval\n          baseval += TICKINTERVAL;\n          i++;\n      }\n  }\n\n  getDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 10, {\n      min: 10,\n      max: 90\n  })\n\n  function getNewSeries(baseval, yrange) {\n      var newDate = baseval + TICKINTERVAL;\n      lastDate = newDate\n\n      for(var i = 0; i< data.length - 10; i++) {\n          // IMPORTANT\n          // we reset the x and y of the data which is out of drawing area\n          // to prevent memory leaks\n          data[i].x = newDate - XAXISRANGE - TICKINTERVAL\n          data[i].y = 0\n      }\n      \n      data.push({\n          x: newDate,\n          y: Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min\n      })\n      \n  }\n\n  function resetData(){\n      // Alternatively, you can also reset the data at certain intervals to prevent creating a huge series \n      data = data.slice(data.length - 10, data.length);\n  }\n  \nimport React, { Component } from 'react';\nimport ReactApexChart from 'react-apexcharts';\n  class LineChart extends Component {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: {\n        grid: {\n          show: false,\n        },\n        chart: {\n            id: 'realtime',\n            animations: {\n              enabled: true,\n              easing: 'linear',\n              dynamicAnimation: {\n                speed: 1000\n              }\n            },\n            toolbar: {\n              show: false\n            },\n            zoom: {\n              enabled: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          stroke: {\n            curve: 'smooth',\n            width: 4,\n          },\n          markers: {\n            size: 0\n          },\n          colors:['#9e0034', '#9e0034', '#9e0034'],\n          xaxis: {\n            labels:{\n              show: false,\n            },\n            axisBorder: {\n              show: false,\n            },\n            type: 'datetime',\n            range: XAXISRANGE,\n          },\n          yaxis: {\n            labels:{\n              show: false,\n            },\n            max: 100\n          },\n          legend: {\n            show: false\n          }\n      },\n      series: [{\n        data: data.slice()\n      }],\n    }\n  }\n  \n  componentDidMount() {\n    this.intervals()\n  }\n\n  intervals () {\n    window.setInterval(() => {\n      getNewSeries(lastDate, {\n        min: 0,\n        max: 100\n      })\n      \n      ApexCharts.exec('realtime', 'updateSeries', [{\n        data: data\n      }])\n    }, 1000)\n  }\n\n  render() {\n\n    return (\n        <div id=\"chart\">\n          <ReactApexChart options={this.state.options} series={this.state.series} type=\"line\" height=\"150\" />\n        </div>\n         );\n  }\n\n}\n\nexport default LineChart"]},"metadata":{},"sourceType":"module"}