{"ast":null,"code":"var _jsxFileName = \"/home/msclima/go/src/github.com/mariolima/repocrawler/web/src/App.js\";\nimport React, { Component } from 'react';\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react';\nimport './index.css';\nimport Debug from './debug/Debug.js';\nimport Matches from './matches/Matches.js';\nimport Pulse from './crawl_info/pulse.js'; // const URL = 'wss://repocrawler:8090/ws';\n\nconst URL = 'ws://repocrawler:8090/ws';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.ws = new WebSocket(URL);\n    this.status = \"disconnected\";\n\n    this.setSelectedMatch = match => {\n      this.setState({\n        selected_match: match\n      });\n    };\n\n    this.tickRegexFilter = regex => {\n      this.setState(state => state.regexes[regex].Ticked = !state.regexes[regex].Ticked);\n    };\n\n    this.addMessage = message => this.setState(state => state.logs.push(message));\n\n    this.setCrawlingState = cr => this.setState(state => state.crawlstate = cr);\n\n    this.addMatch = match => {\n      this.setState(state => !state.regexes[match.Rule.Regex] ? state.regexes[match.Rule.Regex] = {\n        Count: 1,\n        Ticked: true\n      } : state.regexes[match.Rule.Regex].Count++);\n      this.setState(state => state.matches.push(match));\n    };\n\n    this.submitMessage = messageString => {\n      const message = {\n        name: this.state.name,\n        message: messageString\n      };\n      this.ws.send(JSON.stringify(message));\n    };\n\n    this.state = {\n      name: 'Bob',\n      logs: [{\n        'msg': 'Connecting...'\n      }],\n      matches: [],\n      regexes: {},\n      crawlstate: [],\n      selected_match: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the consolea\n      console.log('connected');\n      this.submitMessage(\"wat\");\n      this.status = \"connected\";\n    };\n\n    this.ws.onmessage = evt => {\n      // on receiving a message, add it to the list of messages\n      const message = JSON.parse(evt.data);\n      console.log(message);\n\n      if (message.event == \"debug\") {\n        this.addMessage(message.data); //this.logs.push(message.data)\n        //this.addMessage(message.data)\n      } else if (message.event == \"match\") {\n        this.addMatch(message.data.match);\n      } else if (message.event == \"state\") {\n        this.setCrawlingState(message.data);\n      }\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); //this.addMessage(\"disconnected\")\n      // automatically try to reconnect on connection loss\n\n      this.setState({\n        ws: new WebSocket(URL)\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Debug, {\n      logs: this.state.logs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Pulse, {\n      regexes: this.state.regexes,\n      tickRegex: this.tickRegexFilter,\n      matches: this.state.matches,\n      crawlstate: this.state.crawlstate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Matches, {\n      filters: this.state.regexes,\n      selectedMatch: this.setSelectedMatch,\n      matches: this.state.matches,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/msclima/go/src/github.com/mariolima/repocrawler/web/src/App.js"],"names":["React","Component","Dimmer","Loader","Image","Segment","Debug","Matches","Pulse","URL","App","constructor","props","ws","WebSocket","status","setSelectedMatch","match","setState","selected_match","tickRegexFilter","regex","state","regexes","Ticked","addMessage","message","logs","push","setCrawlingState","cr","crawlstate","addMatch","Rule","Regex","Count","matches","submitMessage","messageString","name","send","JSON","stringify","componentDidMount","onopen","console","log","onmessage","evt","parse","data","event","onclose","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Dimmer, Loader, Image, Segment } from 'semantic-ui-react'\nimport './index.css'\nimport Debug from './debug/Debug.js'\nimport Matches from './matches/Matches.js'\nimport Pulse from './crawl_info/pulse.js'\n\n// const URL = 'wss://repocrawler:8090/ws';\nconst URL = 'ws://repocrawler:8090/ws';\nclass App extends Component {\n  ws = new WebSocket(URL)\n  status=\"disconnected\"\n\n  constructor(props) {\n        super(props);\n        this.state = {\n          name: 'Bob',\n          logs: [{'msg':'Connecting...'}],\n          matches: [],\n          regexes: {},\n          crawlstate: [],\n          selected_match: \"\",\n        }\n  }\n\n  componentDidMount() {\n      this.ws.onopen = () => {\n        // on connecting, do nothing but log it to the consolea\n        console.log('connected')\n        this.submitMessage(\"wat\")\n        this.status=\"connected\"\n      }\n\n      this.ws.onmessage = evt => {\n        // on receiving a message, add it to the list of messages\n        const message = JSON.parse(evt.data)\n        console.log(message)\n        if(message.event==\"debug\"){\n          this.addMessage(message.data)\n          //this.logs.push(message.data)\n          //this.addMessage(message.data)\n        }else if(message.event==\"match\"){\n          this.addMatch(message.data.match)\n        }else if(message.event==\"state\"){\n          this.setCrawlingState(message.data)\n        }\n      }\n\n      this.ws.onclose = () => {\n        console.log('disconnected')\n        //this.addMessage(\"disconnected\")\n        // automatically try to reconnect on connection loss\n        this.setState({\n          ws: new WebSocket(URL),\n        })\n      }\n  }\n  \n  setSelectedMatch = (match) => {\n        this.setState({selected_match: match});\n  }\n\n  tickRegexFilter = (regex) => {\n        this.setState(state => state.regexes[regex].Ticked=!state.regexes[regex].Ticked );\n  }\n\n  addMessage = message =>\n    this.setState(state => state.logs.push(message))\n\n  setCrawlingState = cr =>\n    this.setState(state => state.crawlstate=cr)\n\n  addMatch = match => {\n    this.setState(state => !state.regexes[match.Rule.Regex] ? state.regexes[match.Rule.Regex]={Count:1,Ticked:true} : state.regexes[match.Rule.Regex].Count++)\n    this.setState(state => state.matches.push(match));\n  }\n\n\n  submitMessage = messageString => {\n    const message = { name: this.state.name, message: messageString }\n    this.ws.send(JSON.stringify(message))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Debug logs={this.state.logs}/>\n        <Pulse\n          regexes={this.state.regexes}\n          tickRegex={this.tickRegexFilter}\n          matches={this.state.matches}\n          crawlstate={this.state.crawlstate}\n          />\n        <Matches filters={this.state.regexes} selectedMatch={this.setSelectedMatch} matches={this.state.matches}/>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}